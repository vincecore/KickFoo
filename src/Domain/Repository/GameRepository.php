<?php

namespace KickFoo\Domain\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\Query\ResultSetMapping;
use KickFoo\Domain\Entity\Player;
use KickFoo\Domain\Entity\Team;

/**
 * GameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameRepository extends EntityRepository implements GameRepositoryInterface
{
    /**
     * Find the games to resume
     *
     * @return array
     */
    public function findOpenGames()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb = $qb->select('g')
                 ->from('KickFoo\Domain\Entity\Game', 'g')
                  ->andWhere('g.end IS NULL');

        return $qb->getQuery()->getResult();
    }

    /**
     * Find the last open game
     *
     * @return array
     */
    public function findLastOpenGame()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb = $qb->select('g')->from('KickFoo\Domain\Entity\Game', 'g')
                 ->andWhere('g.end IS NULL')
                 ->addOrderBy('g.start', 'DESC');
        $query = $qb->getQuery();
        $query->setMaxResults(1);

        return $query->getOneOrNullResult();
    }

    /**
     * @param \DateTime|null $startDate
     * @param \DateTime|null $endDate
     * @return array
     */
    public function findAllGames($startDate = null, $endDate = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('g')
            ->from('KickFoo\Domain\Entity\Game', 'g')
            ->join('g.playerOneTeamOne', 'p1')
            ->join('g.playerTwoTeamOne', 'p2')
            ->join('g.playerOneTeamTwo', 'p3')
            ->join('g.playerTwoTeamTwo', 'p4')
            ->andWhere('p1.active = 1')
            ->andWhere('p2.active = 1')
            ->andWhere('p3.active = 1')
            ->andWhere('p4.active = 1');
        if ($startDate && $endDate) {
            $qb->andWhere('g.start >= :startDate');
            $qb->setParameter('startDate', $startDate);
            $qb->andWhere('g.start <= :endDate');
            $qb->setParameter('endDate', $endDate);
        }
        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * @return array
     */
    public function getTotalGameTime()
    {
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('totalGameTime', 'totalGameTime');

        $query = $this->_em->createNativeQuery('SELECT SUM(TIMESTAMPDIFF(SECOND, g.start, g.end)) AS totalGameTime FROM kickfoo_games g', $rsm);
        $result = $query->getSingleResult();

        return $result['totalGameTime'];
    }

    /**
     * @return array
     */
    public function getAverageGameTime()
    {
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('averageGameTime', 'averageGameTime');

        $query = $this->_em->createNativeQuery('SELECT AVG(TIMESTAMPDIFF(SECOND, g.start, g.end)) AS averageGameTime FROM kickfoo_games g', $rsm);
        $result = $query->getSingleResult();

        return $result['averageGameTime'];
    }

    public function getTotalNumberOfGamesForPlayer(Player $player, $startDate = null, $endDate = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(g.id)')
           ->from('KickFoo\Domain\Entity\Game', 'g')
           ->orWhere('g.playerOneTeamOne = :player')
           ->orWhere('g.playerTwoTeamOne = :player')
           ->orWhere('g.playerOneTeamTwo = :player')
           ->orWhere('g.playerTwoTeamTwo = :player')
           ->andWhere('g.end IS NOT NULL')
           ->setParameter('player', $player->getId());

        if ($startDate && $endDate) {
            $qb->andWhere('g.start >= :startDate');
            $qb->setParameter('startDate', $startDate);
            $qb->andWhere('g.start <= :endDate');
            $qb->setParameter('endDate', $endDate);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getTotalNumberOfWonGamesForPlayer(Player $player, $startDate = null, $endDate = null)
    {
        $qbWinsPlayerOne = $this->_em->createQueryBuilder();
        $qbWinsPlayerOne->select('count(g.id)')
           ->from('KickFoo\Domain\Entity\Game', 'g')
           ->andWhere('g.playerOneTeamOne = :player or g.playerTwoTeamOne = :player')
           ->andWhere('g.goalsTeamOne > g.goalsTeamTwo')
           ->andWhere('g.end IS NOT NULL')
           ->setParameter('player', $player->getId());

        if ($startDate && $endDate) {
            $qbWinsPlayerOne->andWhere('g.start >= :startDate');
            $qbWinsPlayerOne->setParameter('startDate', $startDate);
            $qbWinsPlayerOne->andWhere('g.start <= :endDate');
            $qbWinsPlayerOne->setParameter('endDate', $endDate);
        }

        $qbWinsPlayerTwo = $this->_em->createQueryBuilder();
        $qbWinsPlayerTwo->select('count(g.id)')
           ->from('KickFoo\Domain\Entity\Game', 'g')
           ->andWhere('g.playerOneTeamTwo = :player or g.playerTwoTeamTwo = :player')
           ->andWhere('g.goalsTeamOne < g.goalsTeamTwo')
           ->andWhere('g.end IS NOT NULL')
           ->setParameter('player', $player->getId());

        if ($startDate && $endDate) {
            $qbWinsPlayerTwo->andWhere('g.start >= :startDate');
            $qbWinsPlayerTwo->setParameter('startDate', $startDate);
            $qbWinsPlayerTwo->andWhere('g.start <= :endDate');
            $qbWinsPlayerTwo->setParameter('endDate', $endDate);
        }

        $wins = $qbWinsPlayerOne->getQuery()->getSingleScalarResult() + $qbWinsPlayerTwo->getQuery()->getSingleScalarResult();

        return $wins;
    }

    public function findAllGamesForPlayer(Player $player, $startDate = null, $endDate = null)
    {
        $qb = $this->getAllGamesForPlayerQB($player, $startDate, $endDate);

        return $qb->getQuery()->getResult();
    }


    public function getAllGamesForPlayerQB(Player $player, $startDate = null, $endDate = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('g')
            ->from('KickFoo\Domain\Entity\Game', 'g')
            ->leftJoin('g.playerOneTeamOne', 'p1')
            ->leftJoin('g.playerTwoTeamOne', 'p2')
            ->leftJoin('g.playerOneTeamTwo', 'p3')
            ->leftJoin('g.playerTwoTeamTwo', 'p4')
            ->orWhere('p1.id = :player')
            ->orWhere('p2.id = :player')
            ->orWhere('p3.id = :player')
            ->orWhere('p4.id = :player')
            ->andWhere('g.end IS NOT NULL')
            ->setParameter('player', $player->getId())
            ->setParameter('player', $player->getId());

        if ($startDate && $endDate) {
            $qb->andWhere('g.start >= :startDate');
            $qb->setParameter('startDate', $startDate);
            $qb->andWhere('g.start <= :endDate');
            $qb->setParameter('endDate', $endDate);
        }

        return $qb;
    }

    public function getTotalNumberOfWonGamesForTeam(Team $team, $startDate = null, $endDate = null)
    {
        $qbTeamOne = $this->_em->createQueryBuilder();
        $qbTeamOne->select('count(g.id)')
           ->from('KickFoo\Domain\Entity\Game', 'g')
           ->orWhere('g.teamOne = :team')
           ->andWhere('g.goalsTeamOne > g.goalsTeamTwo')
           ->andWhere('g.end IS NOT NULL')
           ->setParameter('team', $team->getId());

        if ($startDate && $endDate) {
            $qbTeamOne->andWhere('g.start >= :startDate');
            $qbTeamOne->setParameter('startDate', $startDate);
            $qbTeamOne->andWhere('g.start <= :endDate');
            $qbTeamOne->setParameter('endDate', $endDate);
        }

        $qbTeamTwo = $this->_em->createQueryBuilder();
        $qbTeamTwo->select('count(g.id)')
           ->from('KickFoo\Domain\Entity\Game', 'g')
           ->orWhere('g.teamTwo = :team')
           ->andWhere('g.goalsTeamOne < g.goalsTeamTwo')
           ->andWhere('g.end IS NOT NULL')
           ->setParameter('team', $team->getId());

        if ($startDate && $endDate) {
            $qbTeamTwo->andWhere('g.start >= :startDate');
            $qbTeamTwo->setParameter('startDate', $startDate);
            $qbTeamTwo->andWhere('g.start <= :endDate');
            $qbTeamTwo->setParameter('endDate', $endDate);
        }

        $wins = $qbTeamOne->getQuery()->getSingleScalarResult() + $qbTeamTwo->getQuery()->getSingleScalarResult();

        return $wins;
    }

    public function getTotalNumberOfGamesForTeam(Team $team, $startDate = null, $endDate = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(g.id)')
           ->from('KickFoo\Domain\Entity\Game', 'g')
           ->orWhere('g.teamOne = :team')
           ->orWhere('g.teamTwo = :team')
           ->andWhere('g.end IS NOT NULL')
           ->setParameter('team', $team->getId());

        if ($startDate && $endDate) {
            $qb->andWhere('g.start >= :startDate');
            $qb->setParameter('startDate', $startDate);
            $qb->andWhere('g.start <= :endDate');
            $qb->setParameter('endDate', $endDate);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function findAllGamesForTeam(Team $team, $startDate = null, $endDate = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('g')
           ->from('KickFoo\Domain\Entity\Game', 'g')
           ->orWhere('g.teamOne = :team')
           ->orWhere('g.teamTwo = :team')
           ->andWhere('g.end IS NOT NULL')
           ->setParameter('team', $team->getId());

        if ($startDate && $endDate) {
            $qb->andWhere('g.start >= :startDate');
            $qb->setParameter('startDate', $startDate);
            $qb->andWhere('g.start <= :endDate');
            $qb->setParameter('endDate', $endDate);
        }

        return $qb->getQuery()->getResult();
    }

    public function getLastOpenGame()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('g')
           ->from('KickFoo\Domain\Entity\Game', 'g')
           ->andWhere('g.end IS NULL')
           ->addOrderBy('g.start', 'DESC');

        $query = $qb->getQuery();
        $query->setMaxResults(1);

        return $query->getOneOrNullResult();
    }

    public function findAllGamesForTeams(Team $teamOne, Team $teamTwo)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('g')
           ->from('KickFoo\Domain\Entity\Game', 'g')
           ->orWhere('g.teamOne = :teamOne and g.teamTwo = :teamTwo')
           ->orWhere('g.teamOne = :teamTwo and g.teamTwo = :teamOne')
           ->andWhere('g.end IS NOT NULL')
            ->addOrderBy('g.start', 'DESC')
           ->setParameter('teamOne', $teamOne->getId())
           ->setParameter('teamTwo', $teamTwo->getId());

        return $qb->getQuery()->getResult();
    }

    public function findGamesWithScore($scoreTeamOne, $scoreTeamTwo)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('g, p1, p2, p3, p4')
           ->from('KickFoo\Domain\Entity\Game', 'g')
           ->join('g.playerOneTeamOne', 'p1')
           ->join('g.playerTwoTeamOne', 'p2')
           ->join('g.playerOneTeamTwo', 'p3')
           ->join('g.playerTwoTeamTwo', 'p4')
           ->orWhere('g.goalsTeamOne = :scoreTeamOne and g.goalsTeamTwo = :scoreTeamTwo')
           ->orWhere('g.goalsTeamOne = :scoreTeamTwo and g.goalsTeamTwo = :scoreTeamOne')
           ->andWhere('g.end IS NOT NULL')
           ->addOrderBy('g.start', 'DESC')
           ->setParameter('scoreTeamOne', $scoreTeamOne)
           ->setParameter('scoreTeamTwo', $scoreTeamTwo);
        $query = $qb->getQuery();
        $query->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true);
                
        return $query->getResult();
    }

    public function getTotalGamesCount()
    {
        $query = $this->_em->createQuery('SELECT COUNT(g.id) FROM KickFoo\Domain\Entity\Game g');
        $count = $query->getSingleScalarResult();
        return $count;
    }
}
